"""
This type stub file was generated by pyright.
"""

from distutils import version

"""Various utilities for parsing OpenAPI operations from docstrings and validating against
the OpenAPI spec.
"""
COMPONENT_SUBSECTIONS = { 2: { "schema": "definitions","response": "responses","parameter": "parameters","security_scheme": "securityDefinitions" },3: { "schema": "schemas","response": "responses","parameter": "parameters","example": "examples","security_scheme": "securitySchemes" } }
def build_reference(component_type, openapi_major_version, component_name):
    """Return path to reference

    :param str component_type: Component type (schema, parameter, response, security_scheme)
    :param int openapi_major_version: OpenAPI major version (2 or 3)
    :param str component_name: Name of component to reference
    """
    ...

def validate_spec(spec):
    """Validate the output of an :class:`APISpec` object against the
    OpenAPI specification.

    Note: Requires installing apispec with the ``[validation]`` extras.
    ::

        pip install 'apispec[validation]'

    :raise: apispec.exceptions.OpenAPIError if validation fails.
    """
    ...

class OpenAPIVersion(version.LooseVersion):
    """OpenAPI version

    :param str|OpenAPIVersion openapi_version: OpenAPI version

    Parses an OpenAPI version expressed as string. Provides shortcut to digits
    (major, minor, patch).

        Example: ::

            ver = OpenAPIVersion('3.0.2')
            assert ver.major == 3
            assert ver.minor == 0
            assert ver.patch == 1
            assert ver.vstring == '3.0.2'
            assert str(ver) == '3.0.2'
    """
    MIN_INCLUSIVE_VERSION = ...
    MAX_EXCLUSIVE_VERSION = ...
    def __init__(self, openapi_version) -> None:
        ...
    
    @property
    def major(self):
        ...
    
    @property
    def minor(self):
        ...
    
    @property
    def patch(self):
        ...
    


def trim_docstring(docstring):
    """Uniformly trims leading/trailing whitespace from docstrings.

    Based on http://www.python.org/peps/pep-0257.html#handling-docstring-indentation
    """
    ...

def dedent(content):
    """
    Remove leading indent from a block of text.
    Used when generating descriptions from docstrings.
    Note that python's `textwrap.dedent` doesn't quite cut it,
    as it fails to dedent multiline docstrings that include
    unindented text on the initial line.
    """
    ...

def deepupdate(original, update):
    """Recursively update a dict.

    Subdict's won't be overwritten but also updated.
    """
    ...

